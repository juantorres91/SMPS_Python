#export
__all__=('Rows')

#Import
from numpy       import   float64
from sets        import   Set

#-----------------------
#Row section analyser 
#Stores constrains per type and time stage
#-----------------------

def Rows(r_list, Stages=[], R_dic={}):
    """
    Categorizes rows per time and stage
    """
    #Validation (1): Time specifications
    if len(Stages) <> len(R_dic):
        raise NameError("Number of rows in the .tim file must match the number of Stages")
    
    # .cor output parameters
    rows=Set()                                   #List of rows
    R_type={'L':Set(), 'G':Set(),\
            'E':Set() ,'N':[]}                  #List of constraints per type  
    rkeys=Set(R_type.keys())                    #Valid eq types

    # .tim output parameters
    TS={}            #Time-to row list container 
    st=0             #Stage counter
    ct=Stages[0]     #Cur rent stage name
    TS={}            #New dict elements
            
    #Gathering information 
    for u in r_list:

        #-------------------------------------------------
        #Deterministic model parameters
        #-------------------------------------------------
        #Verification (2): Number of line entries
        if len(u) <> 2:
            raise NameError("ROWS section must have 2 entires"+" per line")

        #Verification (3): Allowed equation types
        if u[0] not in rkeys:
            raise NameError("Equation type " + u[0] +" is not allowed for variable\n" +u[1])

        #Verification (4): Previously defined equation
        elif u[1] in rows:
            raise NameError("Equation: "+ u[0]+ " cannont be "\
                            "defined twice\n" \
                            +"Verify ROWS -.cor file") 
        else:
            rows.add(u[1])          #Update rows list

            #Case: Objetive function evaluation 
            if u[0]=='N':
                R_type['N'].append(u[1])
            else:            
                R_type[u[0]].add(u[1])  #Update equation type list  
                
        #------------------------------------------------------
        #Time model parameters
        #------------------------------------------------------
        
        #Case (1): Objective function
        if u[0]=='N':

            #Verification (5): Objective Function location
            if u[1] not in R_dic:
                pass 
            elif u[1] in R_dic and st ==0:
                st+=1
            else:
                raise NameError("Objective function needs to be located at the first period") 
                    
        #Case(2):  Entry in .tim parameters
        elif u[1] in R_dic:

            #Verification (6): Rows must be ordered according .tim file   
            if Stages[st]<>R_dic[u[1]]:
                raise NameError(".cor ROW section does not follow the .tim Order")
            else:
                ct=Stages[st]         #Update current time
                st+=1                 #Update time counter
                TS[u[1]]=ct           #Update time structure
        #Case (3): 
        else:
            TS[u[1]]=ct                          
    #----------------------------
    #Return
    #----------------------------
    return rows, R_type, TS
